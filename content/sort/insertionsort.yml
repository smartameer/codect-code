---
title: Insertion sort algorithm
author:
    - name: Pradeep Patro
      url: https://github.com/smartameer
ref:
    - name: Javascript implementation of different computer science algorithms
      url : https://github.com/mgechev/javascript-algorithms
tags:
    - Sort
languages:
    - Javascript
    - PHP
    - Python
description: |
    Program is to sort an array of integers with insertion sort algorithm
    Time Complexity - O(N^2).
    e.g. [2, 5, 1, 0, 7, 4] => [0, 1, 2, 4, 5, 7]
code:
    Javascript: |
        /**
         *
         * @param {Array} array Input array.
         * @param {Function} comparator Optional. A function that defines an
         * alternative sort order. The function should return a negative,
         * zero, or positive value, depending on the arguments.
         * @return {Array} Sorted array.
         *
         */

        function insertionSort(array, comparator) {
            comparator = comparator || function (x, y) { return x - y; };
            var current;
            var j;
            for (var i = 1; i < array.length; i += 1) {
                current = array[i];
                j = i - 1;

                while (j >= 0 && comparator(array[j], current) > 0) {
                    array[j + 1] = array[j];
                    j -= 1;
                }
                array[j + 1] = current;
            }
            return array;
        }

        var sortedArray = insertionSort([2, 5, 1, 0, 7, 4]);
        console.log(sortedArray); // [0, 1, 2, 4, 5, 7]
    PHP: |
        /**
         *
         * @param {Array} $array Input array
         * @return {Array} Sorted array
         *
         */
        <?php
            function insertionSort($array) {
                $sortedArray = array();
                for ($i = 0 ; $i < count($array); $i++) {
                    $element = $array[$i];
                    $j = $i;
                    while($j > 0 && $sortedArray[$j - 1] > $element) {
                        $sortedArray[$j] = $sortedArray[$j - 1];
                        $j = $j-1;
                    }
                    $sortedArray[$j] = $element;
                }
                return $sortedArray;
            }

            $unsorted = [2, 5, 1, 0, 7, 4];
            $sortedArray = insertionSort($unsorted);
            print_r($val); // Array ( [0] => 0 [1] => 1 [2] => 2 [3] => 4 [4] => 5 [5] => 7 )
        ?>

    Python: |
        /**
         *
         * @param {Array} alist Input array
         *
         */
        def insertionSort(alist):
            for index in range(1, len(alist)):

                currentvalue = alist[index]
                position = index

                while position > 0 and alist[position - 1] > currentvalue:
                    alist[position] = alist[position - 1]
                    position = position - 1

                alist[position] = currentvalue

        alist = [2, 5, 1, 0, 7, 4]
        insertionSort(alist)
        print(alist) // [0, 1, 2, 4, 5, 7]
